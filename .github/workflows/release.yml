name: Release
on:
  push:
    tags:
      - "*.*.*"

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          gh release create "$TAG" \
            --title "Release $TAG" \
            --generate-notes
  build-and-test:
    needs: create-release
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target ${{ matrix.target }}
      - name: Test
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: test
          args: --release --target ${{ matrix.target }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: gitfetch-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/gitfetch
  update-package-files:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      - name: Get checksum
        id: get_checksum
        run: |
          curl -sL https://github.com/${{ github.repository }}/archive/${{ steps.get_version.outputs.VERSION }}.tar.gz | sha256sum | cut -d ' ' -f 1 > checksum.txt
          echo "SHA256=$(cat checksum.txt)" >> $GITHUB_OUTPUT
      - name: Update Homebrew formula
        run: |
          sed -i 's/version ".*"/version "${{ steps.get_version.outputs.VERSION }}"/' Formula/gitfetch.rb
          sed -i 's/sha256 ".*"/sha256 "${{ steps.get_checksum.outputs.SHA256 }}"/' Formula/gitfetch.rb
      - name: Update PKGBUILD
        run: |
          sed -i 's/pkgver=.*/pkgver=${{ steps.get_version.outputs.VERSION }}/' PKGBUILD
          sed -i 's/sha256sums=(.*)/sha256sums=("${{ steps.get_checksum.outputs.SHA256 }}")/' PKGBUILD
      - name: Generate .SRCINFO
        run: |
          echo 'pkgbase = gitfetch' > .SRCINFO
          echo "pkgver = ${{ steps.get_version.outputs.VERSION }}" >> .SRCINFO
          echo "pkgrel = 1" >> .SRCINFO
          echo "sha256sums = ${{ steps.get_checksum.outputs.SHA256 }}" >> .SRCINFO
          # Add other necessary fields from PKGBUILD
      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Formula/gitfetch.rb PKGBUILD .SRCINFO
          git commit -m "Update package files to version ${{ steps.get_version.outputs.VERSION }}"
          git push origin HEAD:main
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.AUR_KNOWN_HOSTS }}
          if_key_exists: replace
      - name: Push to AUR
        env:
          AUR_USERNAME: ${{ secrets.AUR_USERNAME }}
        run: |
          git clone ssh://aur@aur.archlinux.org/${AUR_USERNAME}/gitfetch.git aur-repo
          cp PKGBUILD .SRCINFO aur-repo/
          cd aur-repo
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add PKGBUILD .SRCINFO
          git commit -m "Update to version ${{ steps.get_version.outputs.VERSION }}"
          git push
